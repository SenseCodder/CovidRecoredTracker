{"remainingRequest":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/thread-loader/dist/cjs.js!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/babel-loader/lib/index.js!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue?vue&type=template&id=4ff21dd2","dependencies":[{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue","mtime":1641450479120},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/babel.config.js","mtime":1641292994736},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJncmlkIG1kOmdyaWQtY29scy0yIGdhcC00Igp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBjbGFzczogInNoYWRvdy1tZCBiZy1ibHVlLTEwMCBwLTEwIHRleHQtY2VudGVyIHJvdW5kZWQiCn07Cgp2YXIgX2hvaXN0ZWRfMyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJoMyIsIHsKICBjbGFzczogInRleHQtM3hsIHRleHQtYmx1ZS05MDAgZm9udC1ib2xkIG1iLTQiCn0sICIgQ2FzZXMgIiwgLTEpOwoKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJ0ZXh0LTJ4bCBtYi00Igp9OwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICBjbGFzczogImZvbnQtYm9sZCIKfSwgIk5ldzogIiwgLTEpOwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnIiLCBudWxsLCBudWxsLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfNyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogIGNsYXNzOiAiZm9udC1ib2xkIgp9LCAiVG90YWw6ICIsIC0xKTsKCnZhciBfaG9pc3RlZF84ID0gewogIGNsYXNzOiAic2hhZG93LW1kIGJnLWJsdWUtMTAwIHAtMTAgdGV4dC1jZW50ZXIgcm91bmRlZCIKfTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImgzIiwgewogIGNsYXNzOiAidGV4dC0zeGwgdGV4dC1ibHVlLTkwMCBmb250LWJvbGQgbWItNCIKfSwgIiBEZWF0aHMgIiwgLTEpOwoKdmFyIF9ob2lzdGVkXzEwID0gewogIGNsYXNzOiAidGV4dC0yeGwgbWItNCIKfTsKCnZhciBfaG9pc3RlZF8xMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogIGNsYXNzOiAiZm9udC1ib2xkIgp9LCAiTmV3OiAiLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfMTIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnIiLCBudWxsLCBudWxsLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfMTMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICBjbGFzczogImZvbnQtYm9sZCIKfSwgIlRvdGFsOiAiLCAtMSk7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2hvaXN0ZWRfMywgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNCwgW19ob2lzdGVkXzUsIF9jcmVhdGVUZXh0Vk5vZGUoIiAiICsgX3RvRGlzcGxheVN0cmluZygkb3B0aW9ucy5udW1iZXJXaXRoQ29tbWFzKCRwcm9wcy5zdGF0cy5OZXdDb25maXJtZWQpKSArICIgIiwgMSksIF9ob2lzdGVkXzYsIF9ob2lzdGVkXzcsIF9jcmVhdGVUZXh0Vk5vZGUoIiAiICsgX3RvRGlzcGxheVN0cmluZygkb3B0aW9ucy5udW1iZXJXaXRoQ29tbWFzKCRwcm9wcy5zdGF0cy5Ub3RhbENvbmZpcm1lZCkpLCAxKV0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzgsIFtfaG9pc3RlZF85LCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xMCwgW19ob2lzdGVkXzExLCBfY3JlYXRlVGV4dFZOb2RlKCIgIiArIF90b0Rpc3BsYXlTdHJpbmcoJG9wdGlvbnMubnVtYmVyV2l0aENvbW1hcygkcHJvcHMuc3RhdHMuTmV3RGVhdGhzKSkgKyAiICIsIDEpLCBfaG9pc3RlZF8xMiwgX2hvaXN0ZWRfMTMsIF9jcmVhdGVUZXh0Vk5vZGUoIiAiICsgX3RvRGlzcGxheVN0cmluZygkb3B0aW9ucy5udW1iZXJXaXRoQ29tbWFzKCRwcm9wcy5zdGF0cy5Ub3RhbERlYXRocykpLCAxKV0pXSldKTsKfQ=="},{"version":3,"sources":["/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAEK,IAFL,EAEK;AAFD,EAAA,KAAK,EAAC;AAEL,CAFL,EAAkD,SAAlD,EAEA,CAAA,CAFA,C;;;AAGK,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,OAAxB,EACA,CAAA,CADA,C;;8BAGA,mBAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA,CAAJ,C;;8BACA,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,SAAxB,EACA,CAAA,CADA,C;;;AAMH,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAEK,IAFL,EAEK;AAFD,EAAA,KAAK,EAAC;AAEL,CAFL,EAAkD,UAAlD,EAEA,CAAA,CAFA,C;;;AAGK,EAAA,KAAK,EAAC;;;+BACP,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,OAAxB,EACA,CAAA,CADA,C;;+BAGA,mBAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA,CAAJ,C;;+BACA,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,SAAxB,EACA,CAAA,CADA,C;;;uBAzBZ,mBAAA,CA8BM,KA9BN,EAAA,UAAA,EA8BM,CA7BF,mBAAA,CAaM,KAbN,EAAA,UAAA,EAaM,CAZF,UAYE,EATF,mBAAA,CAQM,KARN,EAAA,UAAA,EAQM,CAPF,UAOE,E,iBANK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,YAAvB,CAAF,CADO,GACkC,G,EACzC,C,CAIE,EAJF,UAIE,EAHF,UAGE,E,iBAFK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,cAAvB,CAAF,C,EAAuC,C,CACrC,CARN,CASE,CAbN,CA6BE,EAdF,mBAAA,CAaM,KAbN,EAAA,UAAA,EAaM,CAZF,UAYE,EATF,mBAAA,CAQM,KARN,EAAA,WAAA,EAQM,CAPF,WAOE,E,iBANK,MACP,gBAAA,CAAG,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,SAAvB,CAAH,CADO,GACgC,G,EACvC,C,CAIE,EAJF,WAIE,EAHF,WAGE,E,iBAFK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,WAAvB,CAAF,C,EAAoC,C,CAClC,CARN,CASE,CAbN,CAcE,CA9BN,C","sourcesContent":["<template>\n    <div class=\"grid md:grid-cols-2 gap-4\">\n        <div class=\"shadow-md bg-blue-100 p-10 text-center rounded\">\n            <h3 class=\"text-3xl text-blue-900 font-bold mb-4\">\n                Cases\n            </h3>\n            <div class=\"text-2xl mb-4\">\n                <span class=\"font-bold\">New:\n                </span>\n                {{numberWithCommas(stats.NewConfirmed) }}\n                <br>\n                <span class=\"font-bold\">Total:\n                </span>\n                {{numberWithCommas(stats.TotalConfirmed)}}\n            </div>\n        </div>\n\n        <div class=\"shadow-md bg-blue-100 p-10 text-center rounded\">\n            <h3 class=\"text-3xl text-blue-900 font-bold mb-4\">\n                Deaths\n            </h3>\n            <div class=\"text-2xl mb-4\">\n                <span class=\"font-bold\">New:\n                </span>\n                {{ numberWithCommas(stats.NewDeaths) }}\n                <br>\n                <span class=\"font-bold\">Total: \n                </span>\n                {{numberWithCommas(stats.TotalDeaths)}}\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'DataBoxes',\n    props: ['stats'],\n    methods:{\n        numberWithCommas(x){\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}
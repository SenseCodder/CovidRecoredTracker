{"remainingRequest":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/babel-loader/lib/index.js!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue?vue&type=template&id=979232a2","dependencies":[{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue","mtime":1641450459731},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/babel.config.js","mtime":1641292994736},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJncmlkIG1kOmdyaWQtY29scy0yIGdhcC00Igp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBjbGFzczogInNoYWRvdy1tZCBiZy1ibHVlLTEwMCBwLTEwIHRleHQtY2VudGVyIHJvdW5kZWQiCn07Cgp2YXIgX2hvaXN0ZWRfMyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJoMyIsIHsKICBjbGFzczogInRleHQtM3hsIHRleHQtYmx1ZS05MDAgZm9udC1ib2xkIG1iLTQiCn0sICIgQ2FzZXMgIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJ0ZXh0LTJ4bCBtYi00Igp9OwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICBjbGFzczogImZvbnQtYm9sZCIKfSwgIk5ldzogIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICBjbGFzczogImZvbnQtYm9sZCIKfSwgIlRvdGFsOiAiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNyA9IHsKICBjbGFzczogInNoYWRvdy1tZCBiZy1ibHVlLTEwMCBwLTEwIHRleHQtY2VudGVyIHJvdW5kZWQiCn07Cgp2YXIgX2hvaXN0ZWRfOCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJoMyIsIHsKICBjbGFzczogInRleHQtM3hsIHRleHQtYmx1ZS05MDAgZm9udC1ib2xkIG1iLTQiCn0sICIgRGVhdGhzICIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF85ID0gewogIGNsYXNzOiAidGV4dC0yeGwgbWItNCIKfTsKCnZhciBfaG9pc3RlZF8xMCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogIGNsYXNzOiAiZm9udC1ib2xkIgp9LCAiTmV3OiAiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnIiLCBudWxsLCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICBjbGFzczogImZvbnQtYm9sZCIKfSwgIlRvdGFsOiAiLCAtMQovKiBIT0lTVEVEICovCik7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2hvaXN0ZWRfMywgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNCwgW19ob2lzdGVkXzUsIF9jcmVhdGVUZXh0Vk5vZGUoIiAiICsgX3RvRGlzcGxheVN0cmluZygkb3B0aW9ucy5udW1iZXJXaXRoQ29tbWFzKCRwcm9wcy5zdGF0cy5OZXdDb25maXJtZWQpKSArICIgIiwgMQogIC8qIFRFWFQgKi8KICApLCBfaG9pc3RlZF82LCBfY3JlYXRlVGV4dFZOb2RlKCIgIiArIF90b0Rpc3BsYXlTdHJpbmcoJG9wdGlvbnMubnVtYmVyV2l0aENvbW1hcygkcHJvcHMuc3RhdHMuVG90YWxDb25maXJtZWQpKSwgMQogIC8qIFRFWFQgKi8KICApXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNywgW19ob2lzdGVkXzgsIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzksIFtfaG9pc3RlZF8xMCwgX2NyZWF0ZVRleHRWTm9kZSgiICIgKyBfdG9EaXNwbGF5U3RyaW5nKCRvcHRpb25zLm51bWJlcldpdGhDb21tYXMoJHByb3BzLnN0YXRzLk5ld0RlYXRocykpLCAxCiAgLyogVEVYVCAqLwogICksIF9ob2lzdGVkXzExLCBfaG9pc3RlZF8xMiwgX2NyZWF0ZVRleHRWTm9kZSgiICIgKyBfdG9EaXNwbGF5U3RyaW5nKCRvcHRpb25zLm51bWJlcldpdGhDb21tYXMoJHByb3BzLnN0YXRzLlRvdGFsRGVhdGhzKSksIDEKICAvKiBURVhUICovCiAgKV0pXSldKTsKfQ=="},{"version":3,"sources":["/home/rashmita/Documents/project/covidtracker/covid-tracker/src/components/DataBoxes.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAEK,IAFL,EAEK;AAFD,EAAA,KAAK,EAAC;AAEL,CAFL,EAAkD,SAAlD,EAEA,CAAA;AAAA;AAFA,C;;;AAGK,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,OAAxB,EACA,CAAA;AAAA;AADA,C;;8BAGA,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,SAAxB,EACA,CAAA;AAAA;AADA,C;;;AAMH,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAEK,IAFL,EAEK;AAFD,EAAA,KAAK,EAAC;AAEL,CAFL,EAAkD,UAAlD,EAEA,CAAA;AAAA;AAFA,C;;;AAGK,EAAA,KAAK,EAAC;;;+BACP,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,OAAxB,EACA,CAAA;AAAA;AADA,C;;+BAEuC,mBAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;+BACvC,mBAAA,CACO,MADP,EACO;AADD,EAAA,KAAK,EAAC;AACL,CADP,EAAwB,SAAxB,EACA,CAAA;AAAA;AADA,C;;;uBAvBZ,mBAAA,CA4BM,KA5BN,EAAA,UAAA,EA4BM,CA3BF,mBAAA,CAYM,KAZN,EAAA,UAAA,EAYM,CAXF,UAWE,EARF,mBAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANF,UAME,E,iBALK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,YAAvB,CAAF,CADO,GACkC,G,EACzC;AAAA;GAGE,EAHF,UAGE,E,iBAFK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,cAAvB,CAAF,C,EAAuC;AAAA;GACrC,CAPN,CAQE,CAZN,CA2BE,EAbF,mBAAA,CAYM,KAZN,EAAA,UAAA,EAYM,CAXF,UAWE,EARF,mBAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANF,WAME,E,iBALK,MACP,gBAAA,CAAG,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,SAAvB,CAAH,C,EAAmC;AAAA;GAIjC,EAJqC,WAIrC,EAHF,WAGE,E,iBAFK,MACP,gBAAA,CAAE,QAAA,CAAA,gBAAA,CAAiB,MAAA,CAAA,KAAA,CAAM,WAAvB,CAAF,C,EAAoC;AAAA;GAClC,CAPN,CAQE,CAZN,CAaE,CA5BN,C","sourcesContent":["<template>\n    <div class=\"grid md:grid-cols-2 gap-4\">\n        <div class=\"shadow-md bg-blue-100 p-10 text-center rounded\">\n            <h3 class=\"text-3xl text-blue-900 font-bold mb-4\">\n                Cases\n            </h3>\n            <div class=\"text-2xl mb-4\">\n                <span class=\"font-bold\">New:\n                </span>\n                {{numberWithCommas(stats.NewConfirmed) }}\n                <span class=\"font-bold\">Total:\n                </span>\n                {{numberWithCommas(stats.TotalConfirmed)}}\n            </div>\n        </div>\n\n        <div class=\"shadow-md bg-blue-100 p-10 text-center rounded\">\n            <h3 class=\"text-3xl text-blue-900 font-bold mb-4\">\n                Deaths\n            </h3>\n            <div class=\"text-2xl mb-4\">\n                <span class=\"font-bold\">New:\n                </span>\n                {{ numberWithCommas(stats.NewDeaths) }}<br>\n                <span class=\"font-bold\">Total: \n                </span>\n                {{numberWithCommas(stats.TotalDeaths)}}\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'DataBoxes',\n    props: ['stats'],\n    methods:{\n        numberWithCommas(x){\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}
{"remainingRequest":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/rashmita/Documents/project/covidtracker/covid-tracker/views/Home.vue?vue&type=template&id=42b45cbc","dependencies":[{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/views/Home.vue","mtime":1641474956662},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rashmita/Documents/project/covidtracker/covid-tracker/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8bWFpbiB2LWlmPSIhbG9hZGluZyI+CiAgICAgICAgPERhdGFUaXRsZSA6dGV4dD0idGl0bGUiIDpkYXRhRGF0ZT0iZGF0YURhdGUiIC8+CgogICAgICAgIDxEYXRhQm94ZXMgOnN0YXRzPSJzdGF0cyIgLz4KICAgICAgICAgICAKICAgICAgICA8Q291bnRyeVNlbGVjdCA6Y291bnRyaWVzPSJjb3VudHJpZXMiIEBnZXQtY291bnRyeT0iZ2V0Q291bnRyeURhdGEiIC8+CgogICAgICAgIDxidXR0b24gQGNsaWNrPSJjbGVhckNvdW50cnkiIHYtaWY9InN0YXRzLkNvdW50cnkiIGNsYXNzPSJiZy1ncmVlbi03MDAgdGV4dC13aGl0ZSByb3VuZGVkIHAtMyBtdC0xMCBmb2N1czpvdXRsaW5lLW5vbmUgaG92ZXI6YmctZ3JlZW4tNjAwIj4KICAgICAgICAgICAgQ2xlYXIgQ291bnRyeQogICAgICAgIDwvYnV0dG9uPgogICAgPC9tYWluPgoKICAgIDxtYWluIGNsYXNzPSJmbGV4IGZsZXgtY29sIGFsaWduLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0ZXh0LWNlbnRlciIgdi1lbHNlPgogICAgICAgIDxkaXYgY2xhc3M9InRleHQtZ3JheS01MDAgdGV4dC0zeGwgbXQtMTAgbWItNiI+CiAgICAgICAgICAgIEZldGNoaW5nIERhdGEgCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGltZyA6c3JjPSJsb2FkaW5nSW1hZ2UiIGNsYXNzPSJ3LTI0IG0tYXV0byIgYWx0PSIiIC8+CiAgICA8L21haW4+Cg=="},{"version":3,"sources":["/home/rashmita/Documents/project/covidtracker/covid-tracker/views/Home.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;QAE/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;QAE3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;QAErtI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEN,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/rashmita/Documents/project/covidtracker/covid-tracker/views/Home.vue","sourceRoot":"","sourcesContent":["<template>\n    <main v-if=\"!loading\">\n        <DataTitle :text=\"title\" :dataDate=\"dataDate\" />\n\n        <DataBoxes :stats=\"stats\" />\n           \n        <CountrySelect :countries=\"countries\" @get-country=\"getCountryData\" />\n\n        <button @click=\"clearCountry\" v-if=\"stats.Country\" class=\"bg-green-700 text-white rounded p-3 mt-10 focus:outline-none hover:bg-green-600\">\n            Clear Country\n        </button>\n    </main>\n\n    <main class=\"flex flex-col align-center justify-center text-center\" v-else>\n        <div class=\"text-gray-500 text-3xl mt-10 mb-6\">\n            Fetching Data \n        </div>\n        <img :src=\"loadingImage\" class=\"w-24 m-auto\" alt=\"\" />\n    </main>\n</template>\n\n<script>\nimport DataTitle from '../src/components/DataTitle.vue'\n\nimport DataBoxes from '../src/components/DataBoxes.vue'\n\nimport CountrySelect from '../src/components/CountrySelect.vue';\n\nexport default {\n    name: 'Home',\n    components: {\n        DataTitle,\n        DataBoxes,\n        CountrySelect\n    },\n    data(){\n      return{\n          loading: true,\n          title: 'Global',\n          dataDate:'',\n          stats:{},\n          countries: [],\n          loadingImage:require('../src/assets/loading.gif')\n      }\n    },\n    methods:{\n      async fetchcoviddata(){\n          const res = await fetch('https://api.covid19api.com/summary')\n\n          const data = await res.json()\n          return data\n      },\n     \n      getCountryData(country){\n          this.stats = country\n          this.title = country.Country\n\n          console.log(this.title);\n      },\n      async clearCountry()\n      {\n         this.loading = true\n         const data = await this.fetchcoviddata()\n         this.title = 'Global'\n         this.stats = data.Global\n         this.loading = false\n      }\n\n    },\n    async created() {\n        const data = await this.fetchcoviddata()\n        \n        this.dataDate = data.Date\n        this.stats = data.Global\n        this.countries = data.Countries\n        this.loading = false\n    }\n}\n</script>"]}]}